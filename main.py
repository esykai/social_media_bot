import os
import asyncio
import re

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.telegram import TelegramAPIServer
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from ffmpeg import ffmpeg
import logging

from config import TELEGRAM_BOT_TOKEN, MAX_MEDIA_FILES, MAX_TEXT_LENGTH, ALLOWED_USER_ID
from social_poster import post_to_telegram, post_to_x

session = AiohttpSession(
    api=TelegramAPIServer.from_base('http://telegram-bot-api:8081')
)
bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    session=session
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)


class PostStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_media = State()
    editing_content = State()


class UserState:
    def __init__(self):
        self.media_files = []
        self.description = ""
        self.selected_platforms = {"telegram": True, "x": True}
        self.menu_message_id = None
        self.current_mode = "idle"  # idle, adding_media, adding_text


user_states = {}


async def check_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_id == ALLOWED_USER_ID


async def get_user_state(user_id: int) -> UserState:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_states:
        user_states[user_id] = UserState()
    return user_states[user_id]


def get_platform_status(platforms: dict) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º —Å —ç–º–æ–¥–∑–∏"""
    telegram_status = "‚úÖ" if platforms["telegram"] else "‚ùå"
    x_status = "‚úÖ" if platforms["x"] else "‚ùå"
    return f"üì± Telegram {telegram_status} | üê¶ X.com {x_status}"


def get_main_menu_keyboard(state: UserState) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = []

    keyboard.append([
        InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="add_text"),
        InlineKeyboardButton(text="üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞", callback_data="add_media")
    ])

    if state.description or state.media_files:
        keyboard.append([
            InlineKeyboardButton(text="üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview"),
            InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="clear_all")
        ])

    keyboard.append([
        InlineKeyboardButton(
            text=f"üì± Telegram {'‚úÖ' if state.selected_platforms['telegram'] else '‚ùå'}",
            callback_data="toggle_telegram"
        ),
        InlineKeyboardButton(
            text=f"üê¶ X.com {'‚úÖ' if state.selected_platforms['x'] else '‚ùå'}",
            callback_data="toggle_x"
        )
    ])

    if (state.description or state.media_files) and any(state.selected_platforms.values()):
        keyboard.append([
            InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_post")
        ])

    keyboard.append([
        InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_media_menu_keyboard(state: UserState) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞"""
    keyboard = []

    if state.media_files:
        keyboard.append([
            InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="add_description"),
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")
        ])

        keyboard.append([
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ", callback_data="remove_last_media"),
            InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –º–µ–¥–∏–∞", callback_data="clear_media")
        ])

    keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_content_info(state: UserState) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ"""
    info = "üìä **–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç:**\n\n"

    if state.description:
        preview = state.description[:100] + "..." if len(state.description) > 100 else state.description
        info += f"üìù **–¢–µ–∫—Å—Ç:** {preview}\n"
        info += f"üìè **–î–ª–∏–Ω–∞:** {len(state.description)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"

    if state.media_files:
        info += f"üñºÔ∏è **–ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤:** {len(state.media_files)}\n"
        for i, file in enumerate(state.media_files, 1):
            file_type = "üì∑ –§–æ—Ç–æ" if file.endswith('.jpg') else "üé• –í–∏–¥–µ–æ"
            info += f"  {i}. {file_type}\n"
        info += "\n"

    info += f"üéØ **–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:** {get_platform_status(state.selected_platforms)}"

    return info


async def compress_video(
    input_path: str,
    output_path: str,
    message: types.Message,
    ffmpeg_path: str = "ffmpeg",
    crf: int = 23,
    preset: str = "medium",
    audio_bitrate: str = "128k"
) -> bool:
    """–°–∂–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FFmpeg –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ Telegram."""
    if not os.path.exists(input_path):
        logging.error(f"–§–∞–π–ª {input_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {input_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False
    if not os.path.exists(ffmpeg_path):
        logging.error(f"FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {ffmpeg_path}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {ffmpeg_path}.")
        return False

    progress_message = None
    try:
        ff = ffmpeg.FFmpeg(executable=ffmpeg_path)
        ff.input(input_path)

        progress_message = await message.reply("‚è≥ –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ –Ω–∞—á–∞–ª–æ—Å—å... 0%")

        def handle_progress(line):
            match = re.search(r"time=(\d+:\d+:\d+\.\d+)", line)
            if match:
                time_str = match.group(1)
                asyncio.create_task(progress_message.edit_text(f"‚è≥ –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ: {time_str}"))

        ff.on("stderr", handle_progress)

        ff.output(
            output_path,
            vcodec="libx264",
            crf=crf,
            preset=preset,
            acodec="aac",
            **{"b:a": audio_bitrate},
            movflags="faststart"
        )

        ff.execute()
        await progress_message.edit_text("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∂–∞—Ç–æ!")
        logging.info(f"–í–∏–¥–µ–æ —Å–∂–∞—Ç–æ: {output_path}")
        return True
    except ffmpeg.FFmpegError as e:
        await progress_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ FFmpeg: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ FFmpeg –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ {input_path}: {e}")
        return False
    except Exception as e:
        await progress_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –≤–∏–¥–µ–æ: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ {input_path}: {e}")
        return False


@dp.message(CommandStart())
async def start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id

    if not await check_access(user_id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    state = await get_user_state(user_id)

    welcome_text = (
        "üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Social Media Publisher!**\n\n"
        "üì± –ü—É–±–ª–∏–∫—É–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ Telegram –∏ X.com\n"
        "üñºÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ\n"
        "üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π\n"
        "‚öôÔ∏è –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = get_main_menu_keyboard(state)
    sent_message = await message.reply(welcome_text, reply_markup=keyboard, parse_mode="Markdown")
    state.menu_message_id = sent_message.message_id


@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = message.from_user.id

    if not await check_access(user_id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    help_text = (
        "‚ùì **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**\n\n"
        "üîß **–ö–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ `/start` - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ `/clear` - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë\n"
        "‚Ä¢ `/status` - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å\n\n"
        "üì± **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –∏ X.com\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π\n"
        "‚Ä¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "‚Ä¢ –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
        "‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_FILES} –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JPG –∏ MP4 —Ñ–∞–π–ª—ã"
    )

    await message.reply(help_text, parse_mode="Markdown")


@dp.message(Command("clear"))
async def clear_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /clear"""
    user_id = message.from_user.id

    if not await check_access(user_id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    state = await get_user_state(user_id)

    for file in state.media_files:
        if os.path.exists(file):
            try:
                os.remove(file)
                logging.debug(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file}: {e}")

    user_states[user_id] = UserState()
    await message.reply("üóëÔ∏è –°–µ—Å—Å–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞.")


@dp.message(Command("status"))
async def status_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
    user_id = message.from_user.id

    if not await check_access(user_id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    state = await get_user_state(user_id)
    status_text = get_content_info(state)

    await message.reply(status_text, parse_mode="Markdown")


@dp.callback_query(lambda c: c.data == "add_text")
async def add_text_callback(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
    user_id = callback.from_user.id

    if not await check_access(user_id):
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await state.set_state(PostStates.waiting_for_text)
    await callback.message.edit_text(
        f"üìù **–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:**\n\n"
        f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"üí° –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        parse_mode="Markdown"
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "add_media")
async def add_media_callback(callback: types.CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞"""
    user_id = callback.from_user.id

    if not await check_access(user_id):
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    user_state = await get_user_state(user_id)

    if len(user_state.media_files) >= MAX_MEDIA_FILES:
        await callback.answer(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_FILES} —Ñ–∞–π–ª–æ–≤")
        return

    user_state.current_mode = "adding_media"

    await callback.message.edit_text(
        f"üñºÔ∏è **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ:**\n\n"
        f"üìä –§–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(user_state.media_files)}/{MAX_MEDIA_FILES}\n"
        f"üì∑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG\n"
        f"üé• –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: MP4, MOV\n\n"
        f"üí° –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ",
        reply_markup=get_media_menu_keyboard(user_state),
        parse_mode="Markdown"
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "preview")
async def preview_callback(callback: types.CallbackQuery):
    """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    user_id = callback.from_user.id

    if not await check_access(user_id):
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    state = await get_user_state(user_id)
    preview_text = get_content_info(state)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

    await callback.message.edit_text(preview_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "clear_all")
async def clear_all_callback(callback: types.CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    user_id = callback.from_user.id

    if not await check_access(user_id):
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    state = await get_user_state(user_id)

    for file in state.media_files:
        if os.path.exists(file):
            try:
                os.remove(file)
                logging.debug(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file}: {e}")

    platforms_backup = state.selected_platforms.copy()
    state.media_files = []
    state.description = ""
    state.selected_platforms = platforms_backup
    state.current_mode = "idle"

    main_text = "üóëÔ∏è **–ö–æ–Ω—Ç–µ–Ω—Ç –æ—á–∏—â–µ–Ω!**\n\n" + get_content_info(state)
    keyboard = get_main_menu_keyboard(state)

    await callback.message.edit_text(main_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer("‚úÖ –í–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")


@dp.callback_query(lambda c: c.data in ["toggle_telegram", "toggle_x"])
async def toggle_platform(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    user_id = callback.from_user.id

    if not await check_access(user_id):
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    state = await get_user_state(user_id)
    platform = callback.data.replace("toggle_", "")

    state.selected_platforms[platform] = not state.selected_platforms[platform]

    if not any(state.selected_platforms.values()):
        state.selected_platforms[platform] = True
        await callback.answer("‚ö†Ô∏è –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞")
        return

    platform_name = "üì± Telegram" if platform == "telegram" else "üê¶ X.com"
    status = "‚úÖ –≤–∫–ª—é—á–µ–Ω" if state.selected_platforms[platform] else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω"

    main_text = "üöÄ **Social Media Publisher**\n\n" + get_content_info(state)
    keyboard = get_main_menu_keyboard(state)

    await callback.message.edit_text(main_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer(f"{platform_name} {status}")


@dp.callback_query(lambda c: c.data == "confirm_post")
async def confirm_post(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    user_id = callback.from_user.id

    if not await check_access(user_id):
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    state = await get_user_state(user_id)

    if not state.description and not state.media_files:
        await callback.answer("‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        return

    if not any(state.selected_platforms.values()):
        await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É")
        return

    await callback.message.edit_text("üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ")

    results = []

    try:
        if state.selected_platforms["telegram"]:
            try:
                success = await post_to_telegram(bot, state.media_files, bool(state.media_files), state.description)
                if success:
                    results.append("‚úÖ Telegram - –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
                else:
                    results.append("‚ùå Telegram - –æ—à–∏–±–∫–∞")
            except Exception as e:
                results.append(f"‚ùå Telegram - –æ—à–∏–±–∫–∞: {str(e)}")
                logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {e}")

        if state.selected_platforms["x"]:
            try:
                success = await post_to_x(state.media_files, bool(state.media_files), state.description)
                if success:
                    results.append("‚úÖ X.com - –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
                else:
                    results.append("‚ùå X.com - –æ—à–∏–±–∫–∞")
            except Exception as e:
                results.append(f"‚ùå X.com - –æ—à–∏–±–∫–∞: {str(e)}")
                logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ X.com: {e}")

        result_text = "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:**\n\n" + "\n".join(results)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])

        await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        error_text = f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:**\n\n{str(e)}"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="confirm_post")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        await callback.message.edit_text(error_text, reply_markup=keyboard, parse_mode="Markdown")
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

    finally:
        for file in state.media_files:
            if os.path.exists(file):
                try:
                    os.remove(file)
                    logging.debug(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file}: {e}")

        platforms_backup = state.selected_platforms.copy()
        state.media_files = []
        state.description = ""
        state.selected_platforms = platforms_backup
        state.current_mode = "idle"

    try:
        await callback.answer()
    except:
        pass


@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id

    if not await check_access(user_id):
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    state = await get_user_state(user_id)
    state.current_mode = "idle"

    main_text = "üöÄ **Social Media Publisher**\n\n" + get_content_info(state)
    keyboard = get_main_menu_keyboard(state)

    await callback.message.edit_text(main_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text, PostStates.waiting_for_text)
async def handle_text_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞"""
    user_id = message.from_user.id

    if not await check_access(user_id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    text = message.text

    if len(text) > MAX_TEXT_LENGTH:
        await message.reply(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    user_state = await get_user_state(user_id)
    user_state.description = text

    await state.clear()

    main_text = "‚úÖ **–¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n" + get_content_info(user_state)
    keyboard = get_main_menu_keyboard(user_state)

    await message.reply(main_text, reply_markup=keyboard, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    user_id = message.from_user.id

    if not await check_access(user_id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_state = await get_user_state(user_id)

    if len(user_state.media_files) >= MAX_MEDIA_FILES:
        await message.reply(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_FILES} –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤!")
        return

    try:
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        user_state.media_files.append(file_info.file_path)

        if message.caption:
            if len(message.caption) <= MAX_TEXT_LENGTH:
                user_state.description = message.caption
            else:
                await message.reply(f"‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")

        response_text = f"üì∑ **–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!**\n\n" + get_content_info(user_state)
        keyboard = get_main_menu_keyboard(user_state)

        await message.reply(response_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
@dp.message(F.video)
async def handle_video(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ"""
    user_id = message.from_user.id

    if not await check_access(user_id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_state = await get_user_state(user_id)

    if len(user_state.media_files) >= MAX_MEDIA_FILES:
        await message.reply(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_FILES} –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤!")
        return

    try:
        video = message.video
        file_info = await bot.get_file(video.file_id)
        compressed_path = f"media/video_{user_id}_{video.file_id}_compressed.mp4"

        os.makedirs("media", exist_ok=True)

        file_size_mb = os.path.getsize(file_info.file_path) / (1024 * 1024)
        final_path = file_info.file_path

        if file_size_mb > 30:
            await message.reply(f"üé• –í–∏–¥–µ–æ ({file_size_mb:.2f} –ú–ë) –ø—Ä–µ–≤—ã—à–∞–µ—Ç 30 –ú–ë, —Å–∂–∞—Ç–∏–µ –Ω–∞—á–∞–ª–æ—Å—å...")
            ffmpeg_path = "C:/ffmpeg-7.1.1-essentials_build/bin/ffmpeg.exe"  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø—É—Ç—å
            success = await compress_video(file_info.file_path, compressed_path, message, ffmpeg_path=ffmpeg_path, crf=23,
                                           preset="medium")
            if success:
                final_path = compressed_path
                if os.path.exists(file_info.file_path):
                    os.remove(file_info.file_path)
                    logging.debug(f"–£–¥–∞–ª—ë–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {file_info.file_path}")
            else:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –≤–∏–¥–µ–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª")
                final_path = file_info.file_path
        else:
            await message.reply(f"üé• –í–∏–¥–µ–æ ({file_size_mb:.2f} –ú–ë) –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–∂–∞—Ç–∏—è")

        user_state.media_files.append(final_path)

        if message.caption:
            if len(message.caption) <= MAX_TEXT_LENGTH:
                user_state.description = message.caption
            else:
                await message.reply(f"‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")

        response_text = f"üé• **–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!**\n\n" + get_content_info(user_state)
        keyboard = get_main_menu_keyboard(user_state)

        await message.reply(response_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_other_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id

    if not await check_access(user_id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    await message.reply(
        "ü§î **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞**\n\n"
        "üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
        "‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (JPG, PNG)\n"
        "‚Ä¢ üé• –í–∏–¥–µ–æ (MP4, MOV)\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é",
        parse_mode="Markdown"
    )


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logging.info("–ó–∞–ø—É—Å–∫ Social Media Publisher Bot...")
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
