import logging
import os

from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import ALLOWED_USER_ID, MAX_TEXT_LENGTH, MAX_MEDIA_FILES
from utils.user_state import UserState, user_states
from utils.keyboards import get_main_menu_keyboard, get_content_info
from utils.social_poster import post_to_telegram, post_to_x
from states import PostStates

router = Router()


async def check_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_id == ALLOWED_USER_ID


async def get_user_state(user_id: int) -> UserState:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_states:
        user_states[user_id] = UserState()
    return user_states[user_id]


@router.callback_query(lambda c: c.data == "add_text")
async def add_text_callback(callback: types.CallbackQuery, state):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    user_id = callback.from_user.id

    if not await check_access(user_id):
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    await state.set_state(PostStates.waiting_for_text)

    await callback.message.edit_text(
        f"üìù **–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:**\n\n"
        f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"üí° –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "add_media")
async def add_media_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞"""
    user_id = callback.from_user.id

    if not await check_access(user_id):
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    user_state = await get_user_state(user_id)

    if len(user_state.media_files) >= MAX_MEDIA_FILES:
        await callback.answer(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_FILES} —Ñ–∞–π–ª–æ–≤")
        return

    user_state.current_mode = "adding_media"

    from ..utils.keyboards import get_media_menu_keyboard
    await callback.message.edit_text(
        f"üñºÔ∏è **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ:**\n\n"
        f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(user_state.media_files)}/{MAX_MEDIA_FILES}\n"
        f"üì∑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: JPG, PNG\n"
        f"üé• –ü–æ–¥–¥–µ—Ä–∂–∫–∞: MP4, MOV\n\n"
        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏",
        reply_markup=get_media_menu_keyboard(user_state),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "preview")
async def preview_callback(callback: types.CallbackQuery):
    """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    user_id = callback.from_user.id

    if not await check_access(user_id):
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    state = await get_user_state(user_id)
    preview_text = get_content_info(state)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

    await callback.message.edit_text(preview_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(lambda c: c.data == "clear_all")
async def clear_all_callback(callback: types.CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    user_id = callback.from_user.id

    if not await check_access(user_id):
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    state = await get_user_state(user_id)

    for file in state.media_files:
        if os.path.exists(file):
            try:
                os.remove(file)
                logging.debug(f"–£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {file}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file}: {e}")

    platforms_backup = state.selected_platforms.copy()
    state.media_files = []
    state.description = ""
    state.selected_platforms = platforms_backup
    state.current_mode = "idle"

    main_text = "üóëÔ∏è **–ö–æ–Ω—Ç–µ–Ω—Ç –æ—á–∏—â–µ–Ω!**\n\n" + get_content_info(state)
    keyboard = get_main_menu_keyboard(state)

    await callback.message.edit_text(main_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer("‚úÖ –í—Å—ë —É–¥–∞–ª–µ–Ω–æ")


@router.callback_query(lambda c: c.data in ["toggle_telegram", "toggle_x"])
async def toggle_platform(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    user_id = callback.from_user.id

    if not await check_access(user_id):
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    state = await get_user_state(user_id)
    platform = callback.data.replace("toggle_", "")

    state.selected_platforms[platform] = not state.selected_platforms[platform]

    if not any(state.selected_platforms.values()):
        state.selected_platforms[platform] = True
        await callback.answer("‚ö†Ô∏è –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞")
        return

    platform_name = "üì± Telegram" if platform == "telegram" else "üê¶ X.com"
    status = "‚úÖ –≤–∫–ª—é—á–µ–Ω–∞" if state.selected_platforms[platform] else "‚ùå –æ—Ç–∫–ª—é—á–µ–Ω–∞"

    main_text = "üöÄ **–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —Å–æ—Ü—Å–µ—Ç–∏**\n\n" + get_content_info(state)
    keyboard = get_main_menu_keyboard(state)

    await callback.message.edit_text(main_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer(f"{platform_name} {status}")


@router.callback_query(lambda c: c.data == "confirm_post")
async def confirm_post(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è"""
    user_id = callback.from_user.id

    if not await check_access(user_id):
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    state = await get_user_state(user_id)

    if not state.description and not state.media_files:
        await callback.answer("‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        return

    if not any(state.selected_platforms.values()):
        await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É")
        return

    await callback.message.edit_text("üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ")

    results = []

    try:
        if state.selected_platforms["telegram"]:
            try:
                success = await post_to_telegram(
                    callback.message.bot,
                    state.media_files,
                    bool(state.media_files),
                    state.description
                )
                results.append("‚úÖ Telegram ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ" if success else "‚ùå Telegram ‚Äî –æ—à–∏–±–∫–∞")
            except Exception as e:
                results.append(f"‚ùå Telegram ‚Äî –æ—à–∏–±–∫–∞: {str(e)}")
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {e}")

        if state.selected_platforms["x"]:
            try:
                success = await post_to_x(
                    state.media_files,
                    bool(state.media_files),
                    state.description
                )
                results.append("‚úÖ X.com ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ" if success else "‚ùå X.com ‚Äî –æ—à–∏–±–∫–∞")
            except Exception as e:
                results.append(f"‚ùå X.com ‚Äî –æ—à–∏–±–∫–∞: {str(e)}")
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ X.com: {e}")

        result_text = "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:**\n\n" + "\n".join(results)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        error_text = f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:**\n\n{str(e)}"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="confirm_post")],
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        await callback.message.edit_text(error_text, reply_markup=keyboard, parse_mode="Markdown")
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

    finally:
        for file in state.media_files:
            if os.path.exists(file):
                try:
                    os.remove(file)
                    logging.debug(f"–£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {file}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file}: {e}")

        platforms_backup = state.selected_platforms.copy()
        state.media_files = []
        state.description = ""
        state.selected_platforms = platforms_backup
        state.current_mode = "idle"

    try:
        await callback.answer()
    except:
        pass


@router.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id

    if not await check_access(user_id):
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    state = await get_user_state(user_id)
    state.current_mode = "idle"

    main_text = "üöÄ **–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —Å–æ—Ü—Å–µ—Ç–∏**\n\n" + get_content_info(state)
    keyboard = get_main_menu_keyboard(state)

    await callback.message.edit_text(main_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()
