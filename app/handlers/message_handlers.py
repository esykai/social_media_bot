import os
import logging

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from utils.user_state import UserState, user_states
from utils.keyboards import get_main_menu_keyboard, get_content_info
from utils.video_compressor import compress_video_with_format
from states import PostStates
from config import ALLOWED_USER_ID, MAX_MEDIA_FILES, MAX_TEXT_LENGTH

router = Router()


async def check_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_id == ALLOWED_USER_ID


async def get_user_state(user_id: int) -> UserState:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_states:
        user_states[user_id] = UserState()
    return user_states[user_id]


@router.message(Command("status"))
async def status_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
    user_id = message.from_user.id

    if not await check_access(user_id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    state = await get_user_state(user_id)
    status_text = get_content_info(state)

    await message.reply(status_text, parse_mode="Markdown")


@router.message(F.text, PostStates.waiting_for_text)
async def handle_text_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    user_id = message.from_user.id

    if not await check_access(user_id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = message.text

    if len(text) > MAX_TEXT_LENGTH:
        await message.reply(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    user_state = await get_user_state(user_id)
    user_state.description = text

    await state.clear()

    main_text = "‚úÖ **–¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n" + get_content_info(user_state)
    keyboard = get_main_menu_keyboard(user_state)

    await message.reply(main_text, reply_markup=keyboard, parse_mode="Markdown")


@router.message(F.photo)
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id

    if not await check_access(user_id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    user_state = await get_user_state(user_id)

    if len(user_state.media_files) >= MAX_MEDIA_FILES:
        await message.reply(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_FILES} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤!")
        return

    try:
        photo = message.photo[-1]
        file_info = await message.bot.get_file(photo.file_id)
        user_state.media_files.append(file_info.file_path)

        if message.caption:
            if len(message.caption) <= MAX_TEXT_LENGTH:
                user_state.description = message.caption
            else:
                await message.reply(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è! –ú–∞–∫—Å–∏–º—É–º {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")

        response_text = f"üì∑ **–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!**\n\n" + get_content_info(user_state)
        keyboard = get_main_menu_keyboard(user_state)

        await message.reply(response_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")


@router.message(F.video)
async def handle_video(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id

    if not await check_access(user_id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    user_state = await get_user_state(user_id)

    if len(user_state.media_files) >= MAX_MEDIA_FILES:
        await message.reply(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_FILES} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤!")
        return

    try:
        video = message.video
        file_info = await message.bot.get_file(video.file_id)
        file_path = file_info.file_path
        compressed_path = f"media/video_{user_id}_{video.file_id}_compressed.mp4"

        os.makedirs("media", exist_ok=True)

        file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
        final_path = file_path

        if file_size_mb > 30:
            await message.reply(f"üé• –í–∏–¥–µ–æ ({file_size_mb:.2f} –ú–ë) –ø—Ä–µ–≤—ã—à–∞–µ—Ç 30 –ú–ë, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∂–∞—Ç–∏–µ...")
            success = await compress_video_with_format(
                file_path, compressed_path, message, crf=23, preset="medium"
            )
            if success:
                final_path = compressed_path
                if os.path.exists(file_path):
                    os.remove(file_path)
                    logging.debug(f"–£–¥–∞–ª—ë–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
            else:
                await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª")
                final_path = file_path
        else:
            await message.reply(f"üé• –í–∏–¥–µ–æ ({file_size_mb:.2f} –ú–ë) –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–∂–∞—Ç–∏—è")
            final_path = file_path

        user_state.media_files.append(final_path)

        if message.caption:
            if len(message.caption) <= MAX_TEXT_LENGTH:
                user_state.description = message.caption
            else:
                await message.reply(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è! –ú–∞–∫—Å–∏–º—É–º {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")

        response_text = f"üé• **–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!**\n\n" + get_content_info(user_state)
        keyboard = get_main_menu_keyboard(user_state)

        await message.reply(response_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")


@router.message()
async def handle_other_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id

    if not await check_access(user_id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    await message.reply(
        "ü§î **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞**\n\n"
        "üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
        "‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ üì∑ –§–æ—Ç–æ (JPG, PNG)\n"
        "‚Ä¢ üé• –í–∏–¥–µ–æ (MP4, MOV)\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é",
        parse_mode="Markdown",
    )
